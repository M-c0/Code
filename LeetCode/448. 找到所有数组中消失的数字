/*
给定一个范围在  1 ≤ a[i] ≤ n ( n = 数组大小 ) 的 整型数组，数组中的元素一些出现了两次，另一些只出现一次。

找到所有在 [1, n] 范围之间没有出现在数组中的数字。

您能在不使用额外空间且时间复杂度为O(n)的情况下完成这个任务吗? 你可以假定返回的数组不算在额外空间内。

示例:

输入:
[4,3,2,7,8,2,3,1]

输出:
[5,6]
*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* findDisappearedNumbers(int* nums, int numsSize, int* returnSize){
    for(int i = 0; i<numsSize; i++)//把nums[nums[i]]都加上numsSize这样如果哪个位置没有加上，说明那个位置坐标就是缺少的数
    {
        int x = (nums[i]-1)%numsSize;
        nums[x]+=numsSize;
    }
    int *ret = (int*)malloc(sizeof(int)*numsSize);
    *returnSize = 0;
    for(int i = 0; i < numsSize; i++)
    {
        if(nums[i]<=numsSize)
            ret[(*returnSize)++] = i+1;
    }
    return ret;
}
