/*
给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。

示例 1:

输入: 2
输出: [0,1,1]
示例 2:

输入: 5
输出: [0,1,1,2,1,2]
进阶:

给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？
要求算法的空间复杂度为O(n)。
你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。
*/
暴力解法，位运算
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* countBits(int num, int* returnSize){
    *returnSize = num+1;
    int *ret = (int*)malloc(sizeof(int)*(num+1));
    ret[0] = 0;
    for(int i = 1; i<=num; i++)
    {
        int n = i,k = 0;
        while(n)
        {
            if(n&1)
                k++;
            n>>=1;
        }
        ret[i] = k;
    }
    return ret;
}
动规
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* countBits(int num, int* returnSize){
    *returnSize = num+1;
    int *ret = (int*)malloc(sizeof(int)*(num+1));
    ret[0] = 0;
    if(num == 0)
    return ret;
    ret[1] = 1;
    for(int i = 2; i<=num; i++)
    {
        if(i%2)//奇数
            ret[i] = ret[i/2]+1;
        if(i%2 == 0)
            ret[i] = ret[i/2];
    }
    return ret;
}
