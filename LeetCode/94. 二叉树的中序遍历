/*
给定一个二叉树的根节点 root ，返回它的 中序 遍历。

 

示例 1：


输入：root = [1,null,2,3]
输出：[1,3,2]
示例 2：

输入：root = []
输出：[]
示例 3：

输入：root = [1]
输出：[1]
示例 4：


输入：root = [1,2]
输出：[2,1]
示例 5：


输入：root = [1,null,2]
输出：[1,2]
 

提示：

树中节点数目在范围 [0, 100] 内
-100 <= Node.val <= 100
 

进阶: 递归算法很简单，你可以通过迭代算法完成吗？
*/
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */

int k;
void bsttraver(struct TreeNode* root,int *a)
{
    if(root!=NULL)
    {
        bsttraver(root->left,a);
        a[k++] = root->val;
        bsttraver(root->right,a);
    }
}

int* inorderTraversal(struct TreeNode* root, int* returnSize){
    if(root == NULL)
    {
        *returnSize = 0;
        return NULL;
    }
    k = 0;
    int *ret = malloc(sizeof(int)*101);
    bsttraver(root,ret);
    *returnSize = k;
    return ret;
}

/*
迭代---------------------------------------------------------------------
*/
int* inorderTraversal(struct TreeNode* root, int* returnSize){
    *returnSize = 0;
    if(root == NULL)
    {
        return NULL;
    }
    struct TreeNode** stk = malloc(sizeof(struct TreeNode*)*501);
    int *ret = malloc(sizeof(int)*101);
    int k = 0;
    while(root!=NULL||k>0)
    {
        while(root!=NULL)
        {
            stk[k++] = root;
            root = root->left;
        }
        root = stk[--k];
        ret[(*returnSize)++] = root->val;
        root = root->right;
    }
    return ret;
}
