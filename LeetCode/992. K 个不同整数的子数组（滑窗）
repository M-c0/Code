/*
给定一个正整数数组 A，如果 A 的某个子数组中不同整数的个数恰好为 K，则称 A 的这个连续、不一定独立的子数组为好子数组。
（例如，[1,2,3,1,2] 中有 3 个不同的整数：1，2，以及 3。）
返回 A 中好子数组的数目。
示例 1：
输入：A = [1,2,1,2,3], K = 2
输出：7
解释：恰好由 2 个不同整数组成的子数组：[1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].
示例 2：
输入：A = [1,2,1,3,4], K = 3
输出：3
解释：恰好由 3 个不同整数组成的子数组：[1,2,1,3], [2,1,3], [1,3,4].
提示：
1 <= A.length <= 20000
1 <= A[i] <= A.length
1 <= K <= A.length
*/
//暴力超时
int subarraysWithKDistinct(int* A, int ASize, int K){
    int hash[ASize+1];
    int i,j,s = 0,ss = 0;
    for(i = 0; i<ASize; i++)
    {
        memset(hash,0,sizeof(hash));
        s = 0;
        for(j = i; j<ASize; j++)
        {
            if(!hash[A[j]])
            {
                hash[A[j]]++;
                s++;
            }
            else
                hash[A[j]]++;
            if(s>K)
            {
                break;
            }
            if(s == K)
                ss++;
        }
    }
    return ss;
}
而「最多存在 K 个不同整数的子区间的个数」与「恰好存在 K 个不同整数的子区间的个数」的差恰好等于「最多存在 K−1 个不同整数的子区间的个数」。
最多包含k个不同整数的子区间      最多包含k-1个不同整数的子区间
恰好包含一个。。。              恰好包含一个。。。
恰好包含两个。。。              恰好包含两个。。。
。                             。
。                             。
。                             。
恰好包含k-1个。。               恰好包含k-1个。。。
恰好包含k个。。。
因为原问题就转换成为求解「最多存在 K 个不同整数的子区间的个数」与 「最多存在 K - 1 个不同整数的子区间的个数」，它们其实是一个问题。
int subarraysWithKDistinct(int* A, int ASize, int K){
    int hash1[ASize+1];
    int hash2[ASize+1];
    int left1=0,left2 = 0,right=0,s1 = 0,s2 = 0,ret = 0;
    memset(hash1,0,sizeof(hash1));
    memset(hash2,0,sizeof(hash2));
    while(right<ASize)
    {
        if(!hash1[A[right]])
        {
            s1++;
        }
        hash1[A[right]]++;
        if(!hash2[A[right]])
        {
            s2++;
        }
        hash2[A[right]]++;
        while(s1>K)
        {
            hash1[A[left1]]--;
            if(hash1[A[left1]] == 0)
                s1--;
            left1++;
        }
        while(s2>(K-1))
        {
            hash2[A[left2]]--;
            if(hash2[A[left2]] == 0)
                s2--;
            left2++;
        }
        ret+=left2-left1;
        right++;
    }
    return ret;
}
