/*
给定一个字符串 s 和一个字符串 t ，计算在 s 的子序列中 t 出现的个数。

字符串的一个 子序列 是指，通过删除一些（也可以不删除）字符且不干扰剩余字符相对位置所组成的新字符串。（例如，"ACE" 是 "ABCDE" 的一个子序列，而 "AEC" 不是）

题目数据保证答案符合 32 位带符号整数范围。

 

示例 1：

输入：s = "rabbbit", t = "rabbit"
输出：3
解释：
如下图所示, 有 3 种可以从 s 中得到 "rabbit" 的方案。
(上箭头符号 ^ 表示选取的字母)
rabbbit
^^^^ ^^
rabbbit
^^ ^^^^
rabbbit
^^^ ^^^
示例 2：

输入：s = "babgbag", t = "bag"
输出：5
解释：
如下图所示, 有 5 种可以从 s 中得到 "bag" 的方案。 
(上箭头符号 ^ 表示选取的字母)
babgbag
^^ ^
babgbag
^^    ^
babgbag
^    ^^
babgbag
  ^  ^^
babgbag
    ^^^
 

提示：

0 <= s.length, t.length <= 1000
s 和 t 由英文字母组成
*/
int numDistinct(char * s, char * t){
    int m = strlen(s),n = strlen(t);
    if(m<n)
        return 0;
    long int dp[n+1][m+1];
    memset(dp,0,sizeof(dp));
    for(int i = 0; i<=m; i++)
        dp[0][i] = 1;
    for(int i = 1; i<=n; i++)
    {
        for(int j = 1; j<=m; j++)
        {
            if(s[j-1] == t[i-1])//如果相等，分两种情况：一个是将s中与t当前字符相等的字符算上
            //即当前的子序列数就等于dp[i-1][j-1]。另一种是不算当前s当前的字符，
            //即在s[j]之前，存在多少个t[0-i]这样的字序列。两个相加，即为当前总共的子序列
                dp[i][j] = dp[i-1][j-1]+dp[i][j-1];
            else//如果不相等，当前的子序列数即为遍历到s[j]之前的子序列数，即dp[i][j-1]。
                dp[i][j] = dp[i][j-1];
        }
    }
    return dp[n][m];
}
