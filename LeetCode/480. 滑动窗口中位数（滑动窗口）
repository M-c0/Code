/*
中位数是有序序列最中间的那个数。如果序列的长度是偶数，则没有最中间的数；此时中位数是最中间的两个数的平均数。
例如：
[2,3,4]，中位数是 3
[2,3]，中位数是 (2 + 3) / 2 = 2.5
给你一个数组 nums，有一个长度为 k 的窗口从最左端滑动到最右端。窗口中有 k 个数，每次窗口向右移动 1 位。你的任务是找出每次窗口移动后得到的新窗口中元素的中位数，并输出由它们组成的数组。
示例：
给出 nums = [1,3,-1,-3,5,3,6,7]，以及 k = 3。
窗口位置                      中位数
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7      -1
 1  3 [-1  -3  5] 3  6  7      -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
 因此，返回该滑动窗口的中位数数组 [1,-1,-1,3,5,6]。
提示：
你可以假设 k 始终有效，即：k 始终小于输入的非空数组的元素个数。
与真实值误差在 10 ^ -5 以内的答案将被视作正确答案。
*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
//滑动遍历窗口，在第一个窗口已经排序的基础上进行增删，来找到每个窗口的中位数，这样不必每个窗口都去重新赋值重新排序。
void sort(double a[],int k)
{
    double t;
    for(int i = 0; i<k; i++)
    {
        for(int j = 0; j<k-i-1; j++)
        {
            if(a[j]>a[j+1])
            {
                t = a[j];
                a[j] = a[j+1];
                a[j+1] = t;
            }
        }
    }
}


int cmp(const void *a,const void *b)
{
    return *(double*)a-*(double*)b;
}

double* medianSlidingWindow(int* nums, int numsSize, int k, int* returnSize){
    *returnSize = numsSize-k+1;
    double *res = (double*)malloc(sizeof(double)*(*returnSize));
    int i,j,l,t,tt = 0;
    double a[k];
    for(i = 0; i<=numsSize-k; i++)
    {
        if(i == 0)
        {   
            t = 0;
            for(j = i; j<i+k; j++)
            {
                a[t++] = nums[j];
            }
            //qsort(a,k,sizeof(a[0]),cmp);
            sort(a,k);
        }
        else
        {
            for(j = 0; j<k; j++)
            {
                if(a[j] == nums[i-1])//找到滑动窗口会被舍弃的那个数，由于排了序，顺序不一定。
                    break;
            }
            for(l = j; l<k-1; l++)//把j之后的数都提前一位，相当于删除那一位
            {
                a[l] = a[l+1];
            }
            for(j = 0; j<k-1; j++)
            {
                if(a[j]>nums[i+k-1])
                {
                    for(l = k-1; l>j; l--)
                    {
                        a[l] = a[l-1];
                    }
                    a[j] = nums[i+k-1];
                    break;
                }
            }
            if(j==k-1)
            {
                a[j] = nums[i+k-1];
            }
        }
        if(k%2 != 0)
        {
            res[tt++] = a[k/2];
        }
        else
            res[tt++] = (double)((double)a[k/2]+(double)a[(k-1)/2])/2.0;
    }
    return res;
}
