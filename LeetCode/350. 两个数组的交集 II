/*给定两个数组，编写一个函数来计算它们的交集。
示例 1：
输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:
输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
*/
/*
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    int n = nums1Size>nums2Size?nums1Size:nums2Size,m = 0;
    int *arr = (int*)malloc(sizeof(int)*n);//返回值是一个指向 malloc 的指针
    if(!nums1Size || !nums2Size)
    {
        *returnSize = 0;
        return arr;
    }
    int p[nums2Size];//判断是否已经统计过  输出结果中每个元素出现的次数，应与元素在两个数组中出现次数的 最小值 一致。我们可以不考虑输出结果的顺序。
    memset(p,0,sizeof(p));
    for(int i = 0; i<nums1Size; i++)
    for(int j = 0; j<nums2Size; j++)
    {
        if(nums1[i] == nums2[j] && p[j] == 0)
        {
            arr[m++] = nums1[i];
            p[j]++;
            break;
        }
    }
    *returnSize = m;
    return arr;
}
/*
可以先排序，用双指针，一个指向 nums1，一个指向 nums2，从下标 0 开始比较，当两个相等时，赋值给要返回的数组，如果有一个大于另一个，移动较小的那个，使它指向下一个下标
*/
//假设已排序
for(i = 0,j = 0; i<nums1Size || j<nums2Size; )
{
    if(nums1[i]>nums2[j])
        j++;
    if(nums1[i]<nums2[j])
        i++;
    else
    {
        arr[i] = nums1[i];
        i++,j++;
    }
}
