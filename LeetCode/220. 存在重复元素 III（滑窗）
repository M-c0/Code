/*
给你一个整数数组 nums 和两个整数 k 和 t 。请你判断是否存在 两个不同下标 i 和 j，使得 abs(nums[i] - nums[j]) <= t ，同时又满足 abs(i - j) <= k 。

如果存在则返回 true，不存在返回 false。

 

示例 1：

输入：nums = [1,2,3,1], k = 3, t = 0
输出：true
示例 2：

输入：nums = [1,0,1,1], k = 1, t = 2
输出：true
示例 3：

输入：nums = [1,5,9,1,5,9], k = 2, t = 3
输出：false
 

提示：

0 <= nums.length <= 2 * 104
-231 <= nums[i] <= 231 - 1
0 <= k <= 104
0 <= t <= 231 - 1
*/
class Solution {
public:
    bool containsNearbyAlmostDuplicate(vector<int>& nums, int k, int t) {
        set<long> s;
        for (int i = 0; i < nums.size(); ++i) {
            // 指针定位比 long(nums[i])-t 大的数的位置
            auto pos = s.lower_bound(long(nums[i]) - t);
            // 如果存在且该数字也比 long(nums[i]) + t 小，说明存在我们想要的结果
            if (pos!=s.end() && *pos <= long(nums[i]) + t) return true;
            s.insert(nums[i]);
            if (s.size() > k) s.erase(nums[i-k]); // 维护滑动窗口
        }
        return false;
    }
};
