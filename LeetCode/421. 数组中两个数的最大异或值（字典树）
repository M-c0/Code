/*
给你一个整数数组 nums ，返回 nums[i] XOR nums[j] 的最大运算结果，其中 0 ≤ i ≤ j < n 。

进阶：你可以在 O(n) 的时间解决这个问题吗？

 

示例 1：

输入：nums = [3,10,5,25,2,8]
输出：28
解释：最大运算结果是 5 XOR 25 = 28.
示例 2：

输入：nums = [0]
输出：0
示例 3：

输入：nums = [2,4]
输出：6
示例 4：

输入：nums = [8,10,2]
输出：10
示例 5：

输入：nums = [14,70,53,83,49,91,36,80,92,51,66,70]
输出：127
 

提示：

1 <= nums.length <= 2 * 104
0 <= nums[i] <= 231 - 1
*/
struct Trie
{
    Trie* left = nullptr;
    Trie* right = nullptr;
    Trie(){}
};

class Solution {
private:
    // 字典树的根节点
    Trie* root = new Trie();
    // 最高位的二进制位编号为 30
    static constexpr int HIGH_BIT = 30;
public:
    void add(int num) {
        Trie* cur = root;
        for(int k = HIGH_BIT; k>=0; k--)
        {
            int bit = (num>>k)&1;
            if(bit == 0)
            {
                if(!cur->left)
                    cur->left = new Trie();
                cur = cur->left;
            }
            else
            {
                if(!cur->right)
                    cur->right = new Trie();
                cur = cur->right;
            }
        }
    }

    int check(int num) {
        Trie* cur = root;
        int x = 0;
        for(int k = HIGH_BIT; k>=0; k--)
        {
            int bit = (num>>k)&1;
            if(bit == 0)
            {
                if(cur->right)
                {
                    cur = cur->right;
                    x = (x<<1)+1;
                }
                else
                {
                    cur = cur->left;
                    x = x<<1;
                }
            }
            else
            {
                if(cur->left)
                {
                    cur = cur->left;
                    x = (x<<1)+1;
                }
                else
                {
                    cur = cur->right;
                    x = x<<1;
                }
            }
        }
        return x;
    }

    int findMaximumXOR(vector<int>& nums) {
        int n = nums.size();
        int x = 0;
        for(int i = 1; i<n; i++)
        {
            add(nums[i-1]);
            x = max(x, check(nums[i]));
        }
        return x;
    }
};
