/*
给你一个整数数组 nums ，数组中共有 n 个整数。132 模式的子序列 由三个整数 nums[i]、nums[j] 和 nums[k] 组成，并同时满足：i < j < k 和 nums[i] < nums[k] < nums[j] 。

如果 nums 中存在 132 模式的子序列 ，返回 true ；否则，返回 false 。

 

进阶：很容易想到时间复杂度为 O(n^2) 的解决方案，你可以设计一个时间复杂度为 O(n logn) 或 O(n) 的解决方案吗？

 

示例 1：

输入：nums = [1,2,3,4]
输出：false
解释：序列中不存在 132 模式的子序列。
示例 2：

输入：nums = [3,1,4,2]
输出：true
解释：序列中有 1 个 132 模式的子序列： [1, 4, 2] 。
示例 3：

输入：nums = [-1,3,2,0]
输出：true
解释：序列中有 3 个 132 模式的的子序列：[-1, 3, 2]、[-1, 3, 0] 和 [-1, 2, 0] 。
 

提示：

n == nums.length
1 <= n <= 104
-109 <= nums[i] <= 109
通过次数35,394提交次数105,184
*/
ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
bool find132pattern(int* nums, int numsSize){
    int stk[10000],mid = -2e9,k = 0;//数组模拟单调栈
    stk[k++] = nums[numsSize-1];//因为要实现132，采取维护3的方式，3左边的2要尽可能大，//右边的1要尽可能小
    for(int i = numsSize-2; i>=0; i--)//从后往前遍历
    {
        if(nums[i]<mid)//如果有比mid即2还小的，就是1，即满足条件
            return true;
        while(k>0 && stk[k-1]<nums[i])//栈里维护的是132中的3，mid是2
        {
            mid = stk[--k];//如果有新的比原来的3还大，那么就让它成为新的3，原来的3变成2
        }
        stk[k++] = nums[i];
    }
    return false;
}
/*超时
    for(int i = 0; i<numsSize; i++)
    {
        for(int j = i+1; j<numsSize-1; j++)
        {
            if(nums[i]<nums[j])
            {
                for(int k = j+1; k<numsSize; k++)
                {
                    if(nums[j]>nums[k] && nums[k]>nums[i])
                        return true;
                }
            }
        }
    }
    return false;
    */
    c++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=
class Solution {
public:
    bool find132pattern(vector<int>& nums) {
        stack<int>stk;
        int mid = -2e9;
        for(int i = nums.size()-1; i>=0; i--)
        {
            if(nums[i]<mid)
                return true;
            while(!stk.empty() && stk.top()<nums[i])
            {
                mid = stk.top();
                stk.pop();
            }
            stk.push(nums[i]);
        }
        return false;
    }
};
Java---------------------------------------------------------------------------------------------------
class Solution {
    public boolean find132pattern(int[] nums) {
        Stack<Integer> stk = new Stack<Integer>();
        int mid = Integer.MIN_VALUE;
        for(int i = nums.length-1; i>=0; i--){
            if(mid>nums[i])
                return true;
            while(!stk.empty() && stk.peek()<nums[i]){
                mid = stk.peek();
                stk.pop();
            }
            stk.push(nums[i]);
        }
        return false;
    }
}
