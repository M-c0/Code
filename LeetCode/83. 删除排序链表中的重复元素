/*
存在一个按升序排列的链表，给你这个链表的头节点 head ，请你删除所有重复的元素，使每个元素 只出现一次 。

返回同样按升序排列的结果链表。

 

示例 1：


输入：head = [1,1,2]
输出：[1,2]
示例 2：


输入：head = [1,1,2,3,3]
输出：[1,2,3]
 

提示：

链表中节点数目在范围 [0, 300] 内
-100 <= Node.val <= 100
题目数据保证链表已经按升序排列
*/
c-------------------------------------------------------------------------------
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* deleteDuplicates(struct ListNode* head){
    if(head == NULL)
        return head;
    struct ListNode* p = head;
    while(p!=NULL && p->next!=NULL )
    {
        if(p->val==p->next->val)
            p->next = p->next->next;
        else
            p = p->next;
    }
    return head;
}
c+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//注意，删除的节点没有释放空间，用delete，不是free
class Solution {
public:
    ListNode* deleteDuplicates(ListNode* head) {
        if(head==NULL)
            return head;
        ListNode *p = head,*t;
        while(p->next)
        {
            if(p->val == p->next->val)
            {
                p->next = p->next->next;
            }
            else
                p = p->next;
        }
        return head;
    }
};
Java---------------------------------------------------------------
Java的空是小写null
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        if(head == null){
            return head;
        }
        ListNode p = new ListNode();
        p = head;
        while(p.next!=null){
            if(p.val == p.next.val){
                p.next = p.next.next;
            }
            else
                p = p.next;
        }
        return head;
    }
}
