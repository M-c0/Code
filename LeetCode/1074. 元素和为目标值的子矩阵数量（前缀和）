/*
给出矩阵 matrix 和目标值 target，返回元素总和等于目标值的非空子矩阵的数量。

子矩阵 x1, y1, x2, y2 是满足 x1 <= x <= x2 且 y1 <= y <= y2 的所有单元 matrix[x][y] 的集合。

如果 (x1, y1, x2, y2) 和 (x1', y1', x2', y2') 两个子矩阵中部分坐标不同（如：x1 != x1'），那么这两个子矩阵也不同。

 

示例 1：



输入：matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
输出：4
解释：四个只含 0 的 1x1 子矩阵。
示例 2：

输入：matrix = [[1,-1],[-1,1]], target = 0
输出：5
解释：两个 1x2 子矩阵，加上两个 2x1 子矩阵，再加上一个 2x2 子矩阵。
示例 3：

输入：matrix = [[904]], target = 0
输出：0
 

提示：

1 <= matrix.length <= 100
1 <= matrix[0].length <= 100
-1000 <= matrix[i] <= 1000
-10^8 <= target <= 10^8
*/
class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int n = matrix.size(), m = matrix[0].size();
        vector<vector<int>>sum(n+1,vector<int>(m+1));
        for(int i = 1; i<=n; i++)
        {
            sum[i][0] = 0;
            for(int j = 1; j<=m; j++)
            {
                sum[i][j] = sum[i][j-1]+matrix[i-1][j-1];
                //cout<<sum[i][j]<<" ";
            }
            //cout<<endl;
        }
        int ans = 0;
        for(int i = 1; i<=m; i++)
        {
            for(int j = i-1; j>=0; j--)
            {
                int s = 0;
                for(int k = 1; k<=n; k++)
                {
                    s = 0;
                    for(int u = k; u>0; u--)
                    {
                        s += sum[u][i]-sum[u][j];
                        if(s == target)
                            ans++;
                    }
                }
            }
        }
        return ans;
    }
};
