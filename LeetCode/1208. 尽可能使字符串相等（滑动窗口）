/*
给你两个长度相同的字符串，s 和 t。
将 s 中的第 i 个字符变到 t 中的第 i 个字符需要 |s[i] - t[i]| 的开销（开销可能为 0），也就是两个字符的 ASCII 码值的差的绝对值。
用于变更字符串的最大预算是 maxCost。在转化字符串时，总开销应当小于等于该预算，这也意味着字符串的转化可能是不完全的。
如果你可以将 s 的子字符串转化为它在 t 中对应的子字符串，则返回可以转化的最大长度。
如果 s 中没有子字符串可以转化成 t 中对应的子字符串，则返回 0。
示例 1：
输入：s = "abcd", t = "bcdf", cost = 3
输出：3
解释：s 中的 "abc" 可以变为 "bcd"。开销为 3，所以最大长度为 3。
示例 2：
输入：s = "abcd", t = "cdef", cost = 3
输出：1
解释：s 中的任一字符要想变成 t 中对应的字符，其开销都是 2。因此，最大长度为 1。
示例 3：
输入：s = "abcd", t = "acde", cost = 0
输出：1
解释：你无法作出任何改动，所以最大长度为 1。
提示：
1 <= s.length, t.length <= 10^5
0 <= maxCost <= 10^6
s 和 t 都只含小写英文字母。
*/
int equalSubstring(char * s, char * t, int maxCost){
    int i,j,k = 0,len = 0,n = strlen(s);
    int maxlen = 0;
    for(i = 0; i<n; i++)
    {
        if(i>j)//如果第j个始终过不了，导致窗口越来越小，i甚至超过了j，这时候len已经为0，就可以直接跳过第j个，使j = i。
            j = i;
        if(i == 0)
        {
            for(j = i; j<n; j++)
            {
                if(s[j] == t[j])
                {
                    len++;
                }
                else
                {
                    if(abs(s[j]-t[j]) <= (maxCost-k))
                    {
                        k+=abs(s[j]-t[j]);
                        len++;
                    }
                    else
                    {
                        break;
                    }
                }
            }
        }
        else//i!=0即从i~j这个窗口进行操作新加入的第j个就行，不必每次都去从i开始
        {
            for( ; j<n; j++)
            {
                if(abs(s[j]-t[j])<=maxCost-k)
                {
                    k+=abs(s[j]-t[j]);
                    len++;
                }
                else
                    break;
            }
        }
        maxlen = maxlen>len?maxlen:len;
        if(s[i] == t[i])
        {
            len--;
        }
        else
        {
            if(len>0)//必须考虑len>0的情况，当len<=0此时，k必然也是<=0,再减去绝对值，在前面判断时，maxCost-k就越来越大，使两个字符之间的开销范围增大了。
            {
                len--;
                k-=abs(s[i]-t[i]);
            }
        }
    }
    return maxlen;
}
