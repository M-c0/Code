/*
给定两个字符串 s1 和 s2，写一个函数来判断 s2 是否包含 s1 的排列。
换句话说，第一个字符串的排列之一是第二个字符串的子串。
示例1:
输入: s1 = "ab" s2 = "eidbaooo"
输出: True
解释: s2 包含 s1 的排列之一 ("ba").
示例2:
输入: s1= "ab" s2 = "eidboaoo"
输出: False
注意：
输入的字符串只包含小写字母
两个字符串的长度都在 [1, 10,000] 之间
*/
执行结果：通过
执行用时：676 ms, 在所有 C 提交中击败了5.12%的用户
内存消耗：6 MB, 在所有 C 提交中击败了44.72%的用户
bool checkInclusion(char * s1, char * s2){
    int i,j,k;
    int hash[128] = {0};
    for(i=0; i<strlen(s1); i++)
    {
        hash[s1[i]]++;
    }
    for(i = 0; i<strlen(s2); i++)
    {
        for(j = i; j<i+strlen(s1); j++)
        {
            if(!hash[s2[j]])
            {
                if(j>i)
                {
                    for(k = j-1; k>=i; k--)
                    {
                        hash[s2[k]]++;
                    }
                }
                break;
            }
            else
            {
                hash[s2[j]]--;
            }
        }
        if(j == i+strlen(s1))
            return true;
    }
    return false;
}
执行结果：通过
执行用时：4 ms, 在所有 C 提交中击败了93.17%的用户
内存消耗：6.1 MB, 在所有 C 提交中击败了26.55%的用户
bool equals(int hash1[],int hash2[])
{
    int i;
    for(i = 0; i<26; i++)
    {
        if(hash1[i] != hash2[i])
            return false;
    }
    return true;
}

bool checkInclusion(char * s1, char * s2){
    int hash1[26] = {0},hash2[26] = {0};
    int i,j,k,n = strlen(s1),m = strlen(s2);
    if(n>m)
        return false;
    for(i = 0; i<n; i++)
    {
        hash1[s1[i]-'a']++;
        hash2[s2[i]-'a']++;
    }
    if(equals(hash1,hash2))
        return true;
    for(i = n; i<m; i++)
    {
        hash2[s2[i]-'a']++;
        hash2[s2[i-n]-'a']--;
        if(equals(hash1,hash2))
            return true;
    }
    return false;
}
