/*
给你一个由 无重复 正整数组成的集合 nums ，请你找出并返回其中最大的整除子集 answer ，子集中每一元素对 (answer[i], answer[j]) 都应当满足：
answer[i] % answer[j] == 0 ，或
answer[j] % answer[i] == 0
如果存在多个有效解子集，返回其中任何一个均可。

 

示例 1：

输入：nums = [1,2,3]
输出：[1,2]
解释：[1,3] 也会被视为正确答案。
示例 2：

输入：nums = [1,2,4,8]
输出：[1,2,4,8]
 

提示：

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
nums 中的所有整数 互不相同
*/
 class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        //vector<int> dp(n);
        int dp[n];
        //dp[0] = 1;
        memset(dp,1,sizeof(dp));
        int m = 0,k;
        for(int i = 1; i<n; i++)
        {
            for(int j = 0; j<i; j++)
            {
                if(nums[i]%nums[j] == 0)
                {
                    dp[i] = max(dp[i], dp[j]+1);
                }
                if(m<dp[i])
                {
                    m = dp[i];
                    k = i;
                }
            }
        }
        vector<int> ans;
        if(n == 1)
            ans.push_back(nums[0]);
        for(int i = k; i>=0; i--)
        {
            if(nums[k]%nums[i] == 0 && dp[i] == m)
            {
                ans.push_back(nums[i]);
                k = i;
                m--;
            }
        }
        return ans;
    }
};

//1 2 3 5 9 10
