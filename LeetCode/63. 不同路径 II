/*
之前主要纠结它给出的形参到底代表什么，参考其他代码后应该没错。
** obstacleGrid  这个二级指针代表输入的二维数组   obstacleGridSize 代表数组的行  
* obstacleGridColSize  代表二维数组的列？？？？？（主要纠结这个，为什么用指针来传递）
*/
int uniquePathsWithObstacles(int** obstacleGrid, int obstacleGridSize, int* obstacleGridColSize){
    int n = obstacleGridSize,m = *obstacleGridColSize,i,j,flag = 0;
    int a[n][m];//定义一个数组存储每个位置的路径数
    if(obstacleGrid[0][0])//障碍在入口，应该还需考虑障碍在(1，1)等把路径全部围住的位置。例(2,0),(2,1),(1,2),(0,2)。
        return 0;
    //处理边界    
    for(i = 0; i<n; i++)
    {
        if(obstacleGrid[i][0])//边界如果有一个障碍，则障碍后对整个边界都无法到达
            flag = 1;
        else
            a[i][0] = 1;
        if(flag)
            a[i][0] = 0;//把无法到达的边界赋值为0
    }
    flag = 0;
    for(i = 0; i<m; i++)
    {
        if(obstacleGrid[0][i])
            flag = 1;
        else
            a[0][i] = 1;
        if(flag)
            a[0][i] = 0;
    }
    //
    for(i = 1; i<n; i++)
        for(j = 1; j<m; j++)
            {
                if(obstacleGrid[i][j])//已包括障碍在出口位置。
                    a[i][j] = 0;
                else
                    a[i][j] = a[i-1][j]+a[i][j-1];
            }
    return a[n-1][m-1];
}
