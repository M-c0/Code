/*
给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。

解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

 

示例 1：

输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
示例 2：

输入：nums = [0]
输出：[[],[0]]
 

提示：

1 <= nums.length <= 10
-10 <= nums[i] <= 10
nums 中的所有元素 互不相同
*/
//迭代 C
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** subsets(int* nums, int numsSize, int* returnSize, int** returnColumnSizes){
    int **ret = malloc(sizeof(int*)*(1<<numsSize));
    *returnColumnSizes = malloc(sizeof(int)*(1<<numsSize));
    *returnSize = 1<<numsSize;
    int t[numsSize];
    for(int i = 0; i<1<<numsSize; i++)//枚举每一种情况（二进制表示子集中包含哪一位，100即表示包含第一位）
    {
        int tSize = 0;
        for(int j = 0; j<numsSize; j++)//遍历集合中的每一位数，如果i & 1<<j = 1,即表示i这个情况包含了第j位数
        {
            if(i&(1<<j))
                t[tSize++] = nums[j];
        }
        int *tmp = malloc(sizeof(int)*tSize);
        memcpy(tmp,t,sizeof(int)*tSize);
        (*returnColumnSizes)[i] = tSize;
        ret[i] = tmp;
    }
    return ret;
}
//递归回溯 C++
class Solution {
public:
    vector<int>t;
    vector<vector<int>>ans;
// 递归
    void dfs(int i,vector<int>& nums)
    {
        if(i == nums.size())
        {
            ans.push_back(t);
            return ;
        }
        t.push_back(nums[i]);
        dfs(i+1,nums);//子集包含第i位数
        t.pop_back();
        dfs(i+1,nums);//子集不包含第i个数
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        dfs(0,nums);
        return ans;
    }
};
