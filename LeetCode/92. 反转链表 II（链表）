/*
给你单链表的头节点 head 和两个整数 left 和 right ，其中 left <= right 。请你反转从位置 left 到位置 right 的链表节点，返回 反转后的链表 。
 

示例 1：


输入：head = [1,2,3,4,5], left = 2, right = 4
输出：[1,4,3,2,5]
示例 2：

输入：head = [5], left = 1, right = 1
输出：[5]
 

提示：

链表中节点数目为 n
1 <= n <= 500
-500 <= Node.val <= 500
1 <= left <= right <= n
 

进阶： 你可以使用一趟扫描完成反转吗？
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

void reverse(struct ListNode* head)
{
    struct ListNode* pre = NULL,*cur = head;
    while(cur!=NULL)
    {
        struct ListNode* next = cur->next;
        cur->next = pre;
        pre = cur;
        cur = next;
    }
}

struct ListNode* reverseBetween(struct ListNode* head, int left, int right){
    struct ListNode* retNode = malloc(sizeof(struct ListNode));
    retNode->val = -1;
    retNode->next = head;
    //遍历到left
    struct ListNode* pre = retNode;
    for(int i = 1; i<=left-1; i++)
    {
        pre = pre->next;
    }
    //
    struct ListNode* leftNode = pre->next;
    struct ListNode* rightNode = pre;
    for(int i = 1; i<=right-left+1; i++)
    {
        rightNode = rightNode->next;
    }
    //切断链接
    struct ListNode* cur = rightNode->next;
    rightNode->next = NULL;
    pre->next = NULL;//有必要？？

    reverse(leftNode);
    //拼接
    pre->next = rightNode;
    leftNode->next = cur;
    return retNode->next;
}
//改变节点的值的方法
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */


struct ListNode* reverseBetween(struct ListNode* head, int left, int right){
    int a[right-left+1],k = 0;
    struct ListNode *p = head;
    for(int i = 1; i<=right; i++)
    {
        if(i >= left)
            a[k++] = p->val;
        p = p->next;
    }
    p = head;
    for(int i = 1; i<=right; i++)
    {
        if(i >= left)
            p->val = a[--k];
        p = p->next;
    }
    return head;
}
