/*
给你一个 m 行 n 列的矩阵 matrix ，请按照 顺时针螺旋顺序 ，返回矩阵中的所有元素。
示例 1：

1->2->3
      |
      v
4->5->6
^     |
|     v
7<-8<-9


输入：matrix = [[1,2,3],[4,5,6],[7,8,9]]
输出：[1,2,3,6,9,8,7,4,5]
示例 2：


输入：matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
输出：[1,2,3,4,8,12,11,10,9,5,6,7]
 

提示：

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100
*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int mov[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};
//右，下，左，上
int* spiralOrder(int** matrix, int matrixSize, int* matrixColSize, int* returnSize){
    *returnSize = matrixSize*(*matrixColSize);
    int* ret = (int *)malloc(sizeof(int)*(*returnSize));
    int i = 0,j = 0,k = 0,t = 0;
    int r = *matrixColSize-1,l = 0, u = 1,d = matrixSize-1;//上边界要提前设置为1，因为第一次向上走时，实际上走不到第0行，第0行已经被遍历了。
    while(true)
    {
        ret[t++] = matrix[i][j];
        if(t == *returnSize)
            break;
        if(k==0 && j==r)//往右到达边界
        {
            r--;
            k = 1;
        }
        if(k==1 && i==d)//往下到达边界
        {
            d--;
            k = 2;
        }
        if(k==2 && j==l)//往左到达边界
        {
            l++;
            k = 3;
        }
        if(k==3 && i==u)//往上到达边界
        {
            u++;
            k = 0;
        }
        i+=mov[k][0];
        j+=mov[k][1];
    }
    return ret;
}
