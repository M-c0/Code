/*
给定一个二维矩阵，计算其子矩形范围内元素的总和，该子矩阵的左上角为 (row1, col1) ，右下角为 (row2, col2) 。

Range Sum Query 2D
上图子矩阵左上角 (row1, col1) = (2, 1) ，右下角(row2, col2) = (4, 3)，该子矩形内元素的总和为 8。

 

示例：

给定 matrix = [
  [3, 0, 1, 4, 2],
  [5, 6, 3, 2, 1],
  [1, 2, 0, 1, 5],
  [4, 1, 0, 1, 7],
  [1, 0, 3, 0, 5]
]

sumRegion(2, 1, 4, 3) -> 8
sumRegion(1, 1, 2, 2) -> 11
sumRegion(1, 2, 2, 4) -> 12
 

提示：

你可以假设矩阵不可变。
会多次调用 sumRegion 方法。
你可以假设 row1 ≤ row2 且 col1 ≤ col2 。
*/
typedef struct {
    int **sums;
    int sumSize; 
} NumMatrix;


NumMatrix* numMatrixCreate(int** matrix, int matrixSize, int* matrixColSize) {
    NumMatrix *ret = malloc(sizeof(NumMatrix));
    ret->sumSize = matrixSize;
    ret->sums = malloc(sizeof(int*)*matrixSize);
    for(int i = 0; i<matrixSize; i++)
    {
        ret->sums[i] = malloc(sizeof(int)*((*matrixColSize)+1));
        ret->sums[i][0] = 0;
        for(int j = 0; j<*matrixColSize; j++)
        {
            ret->sums[i][j+1] = ret->sums[i][j]+matrix[i][j];
        }
    }
    return ret;
}

int numMatrixSumRegion(NumMatrix* obj, int row1, int col1, int row2, int col2) {
    int sum = 0;
    for(int i = row1; i<=row2; i++)
    {
        sum+=obj->sums[i][col2+1]-obj->sums[i][col1];
    }
    return sum;
}

void numMatrixFree(NumMatrix* obj) {
    for(int i = 0; i<obj->sumSize; i++)
    {
        free(obj->sums[i]);
    }
    free(obj->sums);
}

/**
 * Your NumMatrix struct will be instantiated and called as such:
 * NumMatrix* obj = numMatrixCreate(matrix, matrixSize, matrixColSize);
 * int param_1 = numMatrixSumRegion(obj, row1, col1, row2, col2);
 
 * numMatrixFree(obj);
*/
