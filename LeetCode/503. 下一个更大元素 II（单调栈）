/*
给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。

示例 1:

输入: [1,2,1]
输出: [2,-1,2]
解释: 第一个 1 的下一个更大的数是 2；
数字 2 找不到下一个更大的数； 
第二个 1 的下一个最大的数需要循环搜索，结果也是 2。
注意: 输入数组的长度不会超过 10000。
*/
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
 暴力---------------------------------------------------------------------------------------------------------
int* nextGreaterElements(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    int *ret = malloc(sizeof(int)*numsSize);
    memset(ret,-1,sizeof(int)*numsSize);
    for(int i = 0; i<numsSize; i++)
    {
        for(int j = i+1; ; j++)
        {
            if(j == numsSize)
            {
                j = 0;
            }
            if(j == i)
                break;
            if(nums[j]>nums[i])
            {
                ret[i] = nums[j];
                break;
            }
        }
    }
    return ret;
}
单调栈二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二
/**
 * 创建一个栈，存储数组的下标（单调不升），然后对栈顶元素对应的值和它对应数组后面一个的值进行判断，是否小于，小于的话就将值赋值给答案数组。
 */
int* nextGreaterElements(int* nums, int numsSize, int* returnSize){
    *returnSize = numsSize;
    if(numsSize == 0)
        return NULL;11
    int *ret = malloc(sizeof(int)*numsSize);
    memset(ret,-1,sizeof(int)*numsSize);
    int stk[numsSize*2-1],top = 0;
    for(int i = 0; i<numsSize*2-1; i++)
    {
        while(top>0 && nums[stk[top-1]]<nums[i%numsSize])
        {
            ret[stk[top-1]] = nums[i%numsSize];
            top--;
        }
        stk[top++] = i%numsSize;
    }
    return ret;
}
