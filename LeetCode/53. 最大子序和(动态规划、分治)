//暴力解法
int maxSubArray(int* nums, int numsSize){
    int i,j,k,l = nums[0];
    for(i = 0; i<numsSize; i++)
    {
        k = 0;
        for(j = i; j<numsSize; j++)
        {
            k += nums[j];
            l = l>k?l:k;
        }
    }
    return l;
}

//动态规划
/*
假设 nums 数组的长度是 n，下标从 0 到 n−1。
我们用 ai 代表 nums[i]，用 f(i) 代表以第 i个数结尾的「连续子数组的最大和」，那么很显然我们要求的答案就是：
max⁡(0≤i≤n−1){f(i)}
因此我们只需要求出每个位置的 f(i)，然后返回 f 数组中的最大值即可。那么我们如何求 f(i) 呢？我们可以考虑 ai 单独成为一段还是加入 f(i−1) 对应的那一段，
这取决于 ai 和 f(i−1)+ai 的大小，我们希望获得一个比较大的，于是可以写出这样的动态规划转移方程：
f(i)=max⁡{f(i−1)+ai,ai}
*/
int maxSubArray(int* nums, int numsSize){
    int i,sum = 0,k = nums[0];
    for(i = 0; i<numsSize; i++)
    {
        sum = sum+nums[i]>nums[i]?sum+nums[i]:nums[i];
        k = sum>k?sum:k;
    }
    return k;
}

//分治  类似二分
/*
1,结束条件，当numsSize==1时直接返回当前值
2,处理左支 求 Max_Left
3,处理右支 求 Max_Right
4,处理本身，向左求最大和Max_l 然后 向右求最大和Max_r
5,最终结果为 MAX(Max_Left, Max_Right, Max_r)
*/
#define MAX(a,b,c) a>b?(a>c?a:c):(b>c?b:c)
int maxSubArray(int* nums, int numsSize){
    int max_r = 0,max_l = 0,mid_l,mid_r;
    if(numsSize == 0 || numsSize == 1)//分治结束条件，当分治最后的范围为1或0
    {
        return nums[0];
    }
    else
    {
        //求左支
        max_l = maxSubArray(&nums[0],(numsSize-1)/2);//不能直接用 nums
        //求右支
        max_r = maxSubArray(&nums[(numsSize+1)/2],numsSize/2);//函数参数运用比较巧妙
    }

    //求中间
    int j = 0;
    mid_l = nums[(numsSize-1)/2];
    for(int i = (numsSize-1)/2; i>=0; i--)//求中间与左边相连最大连续子串和
    {
        j += nums[i];
        mid_l = mid_l>j?mid_l:j;
    }

    j = mid_l;//把左边最大值 和 右边连起来取最大
    mid_r = mid_l;
    for(int i = (numsSize+1)/2; i<numsSize; i++)//求中间与右边相连最大连续子串和
    {
        j += nums[i];
        mid_r = mid_r>j?mid_r:j;
    }
    return MAX(max_l,max_r,mid_r);
}
