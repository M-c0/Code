/*
两个整数的 汉明距离 指的是这两个数字的二进制数对应位不同的数量。

给你一个整数数组 nums，请你计算并返回 nums 中任意两个数之间汉明距离的总和。

 

示例 1：

输入：nums = [4,14,2]
输出：6
解释：在二进制表示中，4 表示为 0100 ，14 表示为 1110 ，2表示为 0010 。（这样表示是为了体现后四位之间关系）
所以答案为：
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6
示例 2：

输入：nums = [4,14,4]
输出：4
 

提示：

1 <= nums.length <= 105
0 <= nums[i] <= 109
*/
class Solution {
public:
    int totalHammingDistance(vector<int>& nums) {
        int n = nums.size();
        int ans = 0;
        for(int i = 0; i<30; i++)
        {
            int c = 0;
            for(auto num : nums)
            {
                c += (num>>i)&1;//所有数的每一位有多少是1
            }
            ans += c*(n-c);//第i位是1的数的总数 乘以 第 i 位不是 1 的。即有这么多种组合
        }
        return ans;
    }
};
