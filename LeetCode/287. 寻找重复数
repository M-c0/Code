//没有理解透，概念模糊

int findDuplicate(int* nums, int numsSize){
    int fast = 0,slow = 0;//快慢指针法  
    /**
        快慢指针思想, fast 和 slow 是指针, nums[slow] 表示取指针对应的元素
        注意 nums 数组中的数字都是在 1 到 n 之间的(在数组中进行游走不会越界),
        因为有重复数字的出现, 所以这个游走必然是成环的, 环的入口就是重复的元素, 
        即按照寻找链表环入口的思路来做
        **/
    while(1)
    {
        fast = nums[nums[fast]];//[2,5,9,6,9,3,8,9,7,1] -->>   9->5->6->7->1->3->8->9
        slow = nums[slow];
        //举个例子：nums = [2,5,9,6,9,3,8,9,7,1]，构造成链表就是：2->9->1->5->3->6->8->7->9
        if(fast == slow)//找到相遇点---8，相遇点（向前方向）距离环口的距离与起点距离环入口的差整数倍的环长，所以让slow从起点开始，fast从相遇点开始继续走，每次都只走一步，再次相遇即为环入口。
        {
            slow = 0;//slow = 0，即 nums[slow] 从 下标 0 开始：2->9->1->5->3->6->8->7->9
            while(nums[fast]!=nums[slow])
            {
                fast = nums[fast];//从下标 8 开始:7->9->2->9->1->5->3->6->8->
                slow = nums[slow];
            }
            return nums[slow];
        }
    }
}
/*
LeetCode 287 题解
https://leetcode-cn.com/problems/find-the-duplicate-number/solution/xun-zhao-zhong-fu-shu-by-leetcode-solution/
*/
