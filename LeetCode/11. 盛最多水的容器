//动态规划
//这题用之前类似的动态规划行不通，考虑的情况不全面  输入:[1,2,1]   输出  1   预期结果  2
int maxArea(int* height, int heightSize){
    int i,j = height[0],k = 0,l = 0,v = 0;
    for(i = 0; i<heightSize; i++)
    {
        k = (j>height[i]?height[i]:j)*(i-l);
        if(j<height[i])
        {
            l = i;
            j = height[i];
        }
        v = v>k?v:k;
    }
    return v;
}

//暴力解法
int maxArea(int* height, int heightSize){
    int i,j,k,l = 0;
    for(i = 0; i<heightSize; i++)
    {
        for(j = i+1; j<heightSize; j++)
        {
            k = (height[i]>height[j]?height[j]:height[i])*(j-i);
            l = l>k?l:k;
        }
    }
    return l;
}

//双指针法  一个指针指向左边，一个指向右边，然后计算容纳的水，每次移动指向的值较小的指针。
/*
为什么对应的数字较小的那个指针不可能再作为容器的边界了？
假设当前左指针和右指针指向的数分别为 x 和 y，不失一般性，我们假设 x≤y。同时，两个指针之间的距离为 t。那么，它们组成的容器的容量为：
min(x,y)∗t=x∗t
我们可以断定，如果我们保持左指针的位置不变，那么无论右指针在哪里，这个容器的容量都不会超过 x∗t 了（如果t往左移，t值减小，而容器的边界仍然是 <=x 的），
即无论我们怎么移动右指针，得到的容器的容量都小于移动前容器的容量。注意这里右指针只能向左移动，因为我们考虑的是第一步，也就是指针还指向数组的左右边界的时候。
这个左指针对应的数不会作为容器的边界了，那么我们就可以丢弃这个位置，将左指针向右移动一个位置，此时的左右指针，就指向了一个新的、规模减少了的问题的数组的左右边界，
因此，我们可以继续像之前 考虑第一步那样考虑这个问题
*/
int maxArea(int* height, int heightSize){
    int i,j,k,l = 0;
    for(i = 0,j=heightSize-1; i<j; )
    {
        k = (height[i]>height[j]?height[j]:height[i])*(j-i);
        l = k>l?k:l;
        if(height[i]>height[j])
        j--;
        else
        i++;
    }
    return l;
}
