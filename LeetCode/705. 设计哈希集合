/*
不使用任何内建的哈希表库设计一个哈希集合（HashSet）。

实现 MyHashSet 类：

void add(key) 向哈希集合中插入值 key 。
bool contains(key) 返回哈希集合中是否存在这个值 key 。
void remove(key) 将给定值 key 从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。
 
示例：

输入：
["MyHashSet", "add", "add", "contains", "contains", "add", "contains", "remove", "contains"]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
输出：
[null, null, null, true, false, null, true, null, false]

解释：
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // 返回 True
myHashSet.contains(3); // 返回 False ，（未找到）
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // 返回 True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // 返回 False ，（已移除）
 

提示：

0 <= key <= 106
最多调用 104 次 add、remove 和 contains 。
*/
CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC暴力
int k;
typedef struct {
    int *hs;
} MyHashSet;

/** Initialize your data structure here. */

MyHashSet* myHashSetCreate() {
    MyHashSet* obj = (MyHashSet*)malloc(sizeof(MyHashSet));
    obj->hs = (int*)malloc(sizeof(int)*10000);
    k = 0;
    return obj;
}
void myHashSetAdd(MyHashSet* obj, int key) {
    bool myHashSetContains(MyHashSet* obj, int key);
    if(!myHashSetContains(obj,key))
        obj->hs[k++] = key;
}

void myHashSetRemove(MyHashSet* obj, int key) {
    bool myHashSetContains(MyHashSet* obj, int key);
    if(!myHashSetContains(obj,key))
        return ;
    if(obj->hs[k-1] == key)
        k--;
    else
        for(int i = 0; i<k-1; i++)
        {
            if(obj->hs[i] == key)
            {
                for(; i<k-1; i++)
                {
                    obj->hs[i] = obj->hs[i+1];
                } 
                k--;
                break;
            }
        }
}

/** Returns true if this set contains the specified element */
bool myHashSetContains(MyHashSet* obj, int key) {
    for(int i = 0; i<k; i++)
    {
        if(obj->hs[i] == key)
            return true;
    }
    return false;
}

void myHashSetFree(MyHashSet* obj) {
    free(obj->hs);
    free(obj);
}

/**
 * Your MyHashSet struct will be instantiated and called as such:
 * MyHashSet* obj = myHashSetCreate();
 * myHashSetAdd(obj, key);
 
 * myHashSetRemove(obj, key);
 
 * bool param_3 = myHashSetContains(obj, key);
 
 * myHashSetFree(obj);
*/
C++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
class MyHashSet {
private:
    vector<list<int>> data;
    static const int base = 769;
    static int hash(int key)
    {
        return key%base;
    }
public:
    /** Initialize your data structure here. */
    //MyHashSet(): data(base) {}
    MyHashSet():data(base) {
    }
    
    void add(int key) {
        int h = hash(key);
        for(auto it = data[h].begin(); it!=data[h].end(); it++)
        {
            if((*it) == key)
                return ;
        }
        data[h].push_back(key);
    }
    
    void remove(int key) { 
        int h = hash(key);
        for(auto it = data[h].begin(); it!=data[h].end(); it++)
        {
            if((*it) == key)
            {
                data[h].erase(it);
                return ;
            }
        }
    }
    
    /** Returns true if this set contains the specified element */
    bool contains(int key) {
        int h = hash(key);
        for(auto it = data[h].begin(); it!=data[h].end(); it++)
        {
            if((*it) == key)
                return true;
        }
        return false;
    }
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */
