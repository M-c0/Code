/*
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，能够偷窃到的最高金额。

 

示例 1：

输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。
示例 2：

输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 3：

输入：nums = [0]
输出：0
 

提示：

1 <= nums.length <= 100
0 <= nums[i] <= 1000
*/
/*
如何才能保证第一间房屋和最后一间房屋不同时偷窃呢？如果偷窃了第一间房屋，则不能偷窃最后一间房屋，因此偷窃房屋的范围是第一间房屋到最后第二间房屋；
如果偷窃了最后一间房屋，则不能偷窃第一间房屋，因此偷窃房屋的范围是第二间房屋到最后一间房屋。

class Solution {
public:
    int rob(vector<int>& nums) {
        int n = nums.size(),i;
        if(n == 1)
            return nums[0];
        if(n==2)
            return max(nums[0],nums[1]);
        int dp1[n],dp2[n+1];
        memset(dp1,-1,sizeof(dp1));
        memset(dp2,-1,sizeof(dp2));
        dp1[0] = nums[0];
        dp1[1] = max(nums[0],nums[1]);
        for(i = 2; i<n-1; i++){
            dp1[i] = max(dp1[i-1],dp1[i-2]+nums[i]);
        }
        dp2[1] = nums[1];
        dp2[2] = max(nums[2],nums[1]);
        for(i = 3; i<=n-1; i++){
            dp2[i] = max(dp2[i-1],dp2[i-2]+nums[i]);
        }
        return dp1[n-2]>dp2[n-1]?dp1[n-2]:dp2[n-1];
    }
};

//dp[i] = max(dp[i-1],dp[i-2]+nums[i])
