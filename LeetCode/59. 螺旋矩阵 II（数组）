/*
给你一个正整数 n ，生成一个包含 1 到 n2 所有元素，且元素按顺时针顺序螺旋排列的 n x n 正方形矩阵 matrix 。

 

示例 1：


输入：n = 3
输出：[[1,2,3],[8,9,4],[7,6,5]]
示例 2：

输入：n = 1
输出：[[1]]
 

提示：

1 <= n <= 20
*/
/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */

int mov[4][2] = {{0,1},{1,0},{0,-1},{-1,0}};

int** generateMatrix(int n, int* returnSize, int** returnColumnSizes){
    *returnSize = n;
    int **Matrix = (int**)malloc(sizeof(int*)*n);
    *returnColumnSizes = malloc(sizeof(int) * n);
    for (int i = 0; i < n; i++) {
        Matrix[i] = malloc(sizeof(int) * n);
        memset(Matrix[i], 0, sizeof(int) * n);
        (*returnColumnSizes)[i] = n;
    }
    int i = 0,j = 0,k = 0,m = 1,r=n-1,d=n-1,l=0,u=1;//上边界注意！！
    //Matrix[0][0] = 1;
    while(true)
    {
        Matrix[i][j] = m++;
        if(m-1==n*n)
            break;
        if(k==0 && j==r)//往右到达边界
        {
            r--;
            k = 1;
        }
        if(k==1 && i==d)//往下到达边界
        {
            d--;
            k = 2;
        }
        if(k==2 && j==l)//往左到达边界
        {
            l++;
            k = 3;
        }
        if(k==3 && i==u)//往上到达边界
        {
            u++;
            k = 0;
        }
        i+=mov[k][0];
        j+=mov[k][1];
    }
    return Matrix;
}
