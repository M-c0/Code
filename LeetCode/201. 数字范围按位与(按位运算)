int rangeBitwiseAnd(int m, int n){
    int i = 0;
    while(m<n)//对所有数字执行按位与运算的结果是所有对应二进制字符串的公共前缀再用零补上后面的剩余位。
    {
        m>>=1;//寻找二进制公共前缀
        n>>=1;
        i++;//记录右移次数
    }
    return m<<i;
}


/*Brian Kernighan 算法的关键在于我们每次对 number 和 number−1 之间进行按位与运算后，
  number 中最右边的 1 会被抹去变成 0。
  基于上述技巧，我们可以用它来计算两个二进制字符串的公共前缀。
  其思想是，对于给定的范围 [m,n]（m<n），我们可以对数字 n 迭代地应用上述技巧，清除最右边的 1，直到它小于或等于 m，此时非公共前缀部分的 1 均被消去。因此最后我们返回 n 即可。
*/
int rangeBitwiseAnd(int m, int n){
    int i = 0;
    while(m<n)//去掉n二进制最右边的1
    {
        n &= (n-1);
    }
    return n;
}
