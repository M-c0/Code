/*
请你仅使用两个栈实现先入先出队列。队列应当支持一般队列的支持的所有操作（push、pop、peek、empty）：

实现 MyQueue 类：

void push(int x) 将元素 x 推到队列的末尾
int pop() 从队列的开头移除并返回元素
int peek() 返回队列开头的元素
boolean empty() 如果队列为空，返回 true ；否则，返回 false
 

说明：

你只能使用标准的栈操作 —— 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。
你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。
 

进阶：

你能否实现每个操作均摊时间复杂度为 O(1) 的队列？换句话说，执行 n 个操作的总时间复杂度为 O(n) ，即使其中一个操作可能花费较长时间。
 

示例：

输入：
["MyQueue", "push", "push", "peek", "pop", "empty"]
[[], [1], [2], [], [], []]
输出：
[null, null, null, 1, 1, false]

解释：
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false
 

提示：

1 <= x <= 9
最多调用 100 次 push、pop、peek 和 empty
假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）
*/
------------------------------------------------------------------------------
？？？遇到测试案例：
["MyQueue","push","peek"]
[[],[1],[]]
执行没错，提交出错
int i = 0,k = 0;
typedef struct {
    int *s;
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() {
    MyQueue *stk = malloc(sizeof(MyQueue));
    stk->s = malloc(sizeof(int)*100);
    memset(stk->s,0,sizeof(int)*100);//sizeof(stk->s)只能初始化两个数？
    /*for(int i = 0; i<100; i++)
        printf("%d ",stk->s[i]);*/
    return stk;
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
    obj->s[k++] = x;
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) {
    int n = obj->s[i];
    obj->s[i++] = 0;
    return n;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
    //if(obj->s[i]>0)
    //printf("%d ",obj->s[i]);
    return obj->s[i];
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) {
    for(int j = 0; j<100; j++)
    {
        if(obj->s[j] != 0)
            return false;
    }
    return true;
}

void myQueueFree(MyQueue* obj) {
    free(obj->s);
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二二
先用C语言实现栈，再用栈实现队列。
创建两个栈，一个用来输入，一个输出，在输出时，把输入栈的元素都放到输出栈中，这样输出栈中元素的顺序就符合队列的输出顺序了。
typedef struct {
    int *s;
    int len,index;
} MyStack;

MyStack * myStackCreate(){
    MyStack *stack = malloc(sizeof(MyStack));
    stack->s = malloc(sizeof(int)*100);
    memset(stack->s,0,sizeof(int)*100);
    stack->len = 100;
    stack->index = 0;
    return stack;
}

void myStackPush(MyStack* obj, int x)
{
    //int i = index;
    obj->s[obj->index++] = x;
}

void MyStackPop(MyStack* obj)
{
    obj->index--;
}

int MyStackTop(MyStack* obj)
{
    return obj->s[obj->index-1];
}

bool MyStackEmpty(MyStack* obj)
{
    return obj->index == 0;
}

void MyStackFree(MyStack* obj)
{
    free(obj->s);
}

typedef struct {
    MyStack *inStack;
    MyStack *outStack;
} MyQueue;

/** Initialize your data structure here. */

MyQueue* myQueueCreate() {
    MyQueue *q = malloc(sizeof(MyQueue));
    q->inStack = myStackCreate();
    q->outStack = myStackCreate();
    return q;
}

void inout(MyQueue* obj){
    while(!MyStackEmpty(obj->inStack))
    {
        myStackPush(obj->outStack, MyStackTop(obj->inStack));
        MyStackPop(obj->inStack);
    }
}

/** Push element x to the back of queue. */
void myQueuePush(MyQueue* obj, int x) {
    myStackPush(obj->inStack,x);
}

/** Removes the element from in front of queue and returns that element. */
int myQueuePop(MyQueue* obj) {
    if(MyStackEmpty(obj->outStack))
    {
        inout(obj);
    }
    int n = MyStackTop(obj->outStack);
    MyStackPop(obj->outStack);
    return n;
}

/** Get the front element. */
int myQueuePeek(MyQueue* obj) {
    if(MyStackEmpty(obj->outStack))
    {
        inout(obj);
    }
    return MyStackTop(obj->outStack);
}

/** Returns whether the queue is empty. */
bool myQueueEmpty(MyQueue* obj) {
    return MyStackEmpty(obj->inStack) && MyStackEmpty(obj->outStack);
}

void myQueueFree(MyQueue* obj) {
    free(obj->inStack);
    free(obj->outStack);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
