/*
给你一个二维整数数组 envelopes ，其中 envelopes[i] = [wi, hi] ，表示第 i 个信封的宽度和高度。

当另一个信封的宽度和高度都比这个信封大的时候，这个信封就可以放进另一个信封里，如同俄罗斯套娃一样。

请计算 最多能有多少个 信封能组成一组“俄罗斯套娃”信封（即可以把一个信封放到另一个信封里面）。

注意：不允许旋转信封。

 
示例 1：

输入：envelopes = [[5,4],[6,4],[6,7],[2,3]]
输出：3
解释：最多信封的个数为 3, 组合为: [2,3] => [5,4] => [6,7]。
示例 2：

输入：envelopes = [[1,1],[1,1],[1,1]]
输出：1
 

提示：

1 <= envelopes.length <= 5000
envelopes[i].length == 2
1 <= wi, hi <= 104
*/
int cmp(int **a,int **b)
{
    return (*a)[0] == (*b)[0] ? (*b)[1] - (*a)[1] : (*a)[0] - (*b)[0];//按w来排序，如果w相等，就按h来排序
}

int maxEnvelopes(int** envelopes, int envelopesSize, int* envelopesColSize){
    if(envelopesSize == 0)
        return 0;
    qsort(envelopes,envelopesSize,sizeof(int*),cmp);
    int dp[envelopesSize];
    dp[0] = 1;
    int max = 1;
    for(int i = 1; i<envelopesSize; i++)
    {
        dp[i] = 1;
        for(int j = 0; j<i; j++)
        {
            if(envelopes[j][1]<envelopes[i][1])
                dp[i] = dp[i]>dp[j]+1 ? dp[i] : dp[j]+1;
            max = max>dp[i]?max:dp[i];
        }
    }
    return max;
}
